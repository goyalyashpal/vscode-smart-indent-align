#!/bin/bash
# -*- sh -*-
# vim: set syntax=sh
# code: language=shellscript

# Copyright (c) 2025 Michael Federczuk
# SPDX-License-Identifier: MPL-2.0 AND Apache-2.0

#region preamble

case "$-" in
	(*'i'*)
		if \command test -n "${BASH_VERSION-}"; then
			# using `eval` here in case a non-Bash shell tries to parse this branch even if the condition is false
			\command eval "\\command printf '%s: ' \"\${BASH_SOURCE[0]}\" >&2"
		fi

		\command printf 'script was called interactively\n' >&2
		return 124
		;;
esac

set -o errexit
set -o nounset

# enabling POSIX-compliant behavior for GNU programs
export POSIXLY_CORRECT=yes POSIX_ME_HARDER=yes

if [ -z "${BASH_VERSION-}" ]; then
	if [ "${0#/}" = "$0" ]; then
		argv0="$0"
	else
		argv0="$(basename -- "$0" && printf x)"
		argv0="${argv0%"$(printf '\nx')"}"
	fi
	readonly argv0

	printf '%s: GNU Bash is required for this script\n' "$argv0" >&2
	exit 1
fi

declare argv0
if [[ ! "$0" =~ ^'/' ]]; then
	argv0="$0"
else
	argv0="$(basename -- "$0" && printf x)"
	argv0="${argv0%$'\nx'}"
fi
readonly argv0

#endregion

#region function definitions

function log() {
	printf '%s\n' "$1" >&2
}

function command_exists() {
	command -v "$1" > '/dev/null'
}

function vsce() {
	npm run vsce -- "$@"
}

function ovsx() {
	npm run ovsx -- "$@"
}

#endregion

if [ $# -gt 0 ]; then
	log "$0: too many arguments: $#"
	exit 4
fi


declare program
for program in "$@"; do
	if command_exists "$program"; then
		continue
	fi

	log "$argv0: $program: program missing"
	exit 27
done
unset -v program


declare root_dir_path
root_dir_path="$(dirname -- "$0" && printf x)"
root_dir_path="${root_dir_path%$'\nx'}"

cd -- "$root_dir_path"

unset -v root_dir_path

#region prompting for target marketplace

readonly marketplace_msvs='msvs' \
         marketplace_openvsx='openvsx'

{
	printf 'To which marketplace/registry do you want to publish to?\n'
	printf ' 1) Microsoft Visual Studio Marketplace\n'
	printf ' 2) Eclipse Open VSX Registry\n'
} >&2
read -rp '> ' ans

declare target_marketplace

case "$ans" in
	(1)
		target_marketplace="$marketplace_msvs"
		log 'Targeting Microsoft Visual Studio Marketplace.'
		;;
	(2)
		target_marketplace="$marketplace_openvsx"
		log "Targeting Eclipse Open VSX Registry."
		;;
	(*)
		if [ -z "$ans" ]; then
			log "Empty answer. Aborting."
		else
			log "Invalid choice '$ans'. Aborting."
		fi

		exit 32
		;;
esac

unset -v ans

readonly target_marketplace

#endregion

log '' # empty line

#region reading information from package.json

declare package_name
package_name="$(jq -r '."name"' -- 'package.json')"
readonly package_name

declare package_version
package_version="$(jq -r '."version"' -- 'package.json')"
readonly package_version

declare package_publisher
package_publisher="$(jq -r '."publisher"' -- 'package.json')"
readonly package_publisher

#endregion

#region checking if the package publisher is logged in (MS VS Marketplace-only)

if [ "$target_marketplace" = "$marketplace_msvs" ]; then
	declare is_package_publisher_logged_in
	is_package_publisher_logged_in=false

	declare logged_in_publisher
	while read -r logged_in_publisher; do
		if [ "$logged_in_publisher" = "$package_publisher" ]; then
			is_package_publisher_logged_in=true
			break
		fi
	done < <(vsce ls-publishers)
	unset -v logged_in_publisher

	if ! $is_package_publisher_logged_in; then
		log "$argv0: publisher '$package_publisher' (from package.json) is not logged in"
		exit 48
	fi

	unset -v is_package_publisher_logged_in
fi

#endregion

#region checking Git stuff

declare git_describe_output
git_describe_output="$(git --no-pager describe --always --dirty)"

if [[ "$git_describe_output" =~ '-dirty'$ ]]; then
	log "$argv0: the working tree is dirty, aborting publishing"
	exit 49
fi

unset -v git_describe_output


declare -a tag_names
tag_names=()
mapfile -t tag_names < <(git tag --list --points-at=HEAD 'v*.*.*')
readonly tag_names

case ${#tag_names[@]} in
	(0)
		log "$argv0: no Git tag (v*.*.*) on HEAD"
		exit 50
		;;
	(1)
		declare tag_name
		tag_name="${tag_names[0]}"

		if [ "v$package_version" != "$tag_name" ]; then
			log "$argv0: Git tag ($tag_name) on HEAD does not match version in 'package.json' (v$package_version)"
			exit 52
		fi

		unset -v tag_name
		;;
	(*)
		log "$argv0: multiple Git tags (v*.*.*) on HEAD"
		exit 51
		;;
esac

#endregion

#region prompting for Open VSX PAT

if [ "$target_marketplace" = "$marketplace_openvsx" ]; then
	declare openvsx_pat
	read -rsp 'Please enter your Open VSX public access token (PAT): ' openvsx_pat
	readonly openvsx_pat

	log '' # newline because read -s

	if command_exists uuidparse; then
		if uuidparse --noheadings --output VARIANT,TYPE,TIME --raw "$openvsx_pat" | grep -Eq '(^| )invalid( |$)'; then
			read -rp 'The entered PAT is not a valid UUID. Continue anyway? [y/N] ' ans

			case "$ans" in
				(['yY']*)
					# continue
					;;
				(*)
					log 'Aborting.'
					exit 33
					;;
			esac

			unset -v ans
		fi
	else
		log "Program 'uuidparse' missing, cannot validate PAT."
	fi

	log ''
fi

#endregion

#region publishing

read -rp 'Ready to publish. Proceed? [y/N] ' ans

case "$ans" in
	(['yY']*)
		# continue
		;;
	(*)
		log 'Aborted.'
		exit 34
		;;
esac

unset -v ans


case "$target_marketplace" in
	("$marketplace_msvs")
		npm run package
		vsce publish
		;;
	("$marketplace_openvsx")
		declare vsix_file_path
		vsix_file_path="$package_name-$package_version.vsix"
		readonly vsix_file_path

		npm run package

		if [ ! -f "$vsix_file_path" ]; then
			log "Expected the VSIX file to be named '$vsix_file_path', but was wrong. Aborting."
			exit 53
		fi

		ovsx --pat "$openvsx_pat" publish "$vsix_file_path"
		;;
esac

log 'Done.'

#endregion
